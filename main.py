import asyncio
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from keys.config import TOKEN, TOKEN_TEST
from aiogram.types import ReplyKeyboardRemove, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from handlers import start, auth, forecast, notifications
from keyboards.menu import reboot_menu
from utils.storage import reboot_notifications, authorized_users

test = False
sendmessage = True
if not test:
    bot = Bot(token=TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
else: 
    bot = Bot(token=TOKEN_TEST)
    dp = Dispatcher(storage=MemoryStorage())
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(start.router)
dp.include_router(auth.router)
dp.include_router(forecast.router)
dp.include_router(notifications.router)


async def on_startup(bot: Bot):
    try:
        await bot.send_message(
                chat_id=166853396,
                text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω",
                reply_markup=reboot_menu
            )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å master: {e}")
    if sendmessage:
        for user_id in authorized_users:
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text="""
                            –ü—Ä–∏–≤–µ—Ç, –Ω–∞—à –¥–æ—Ä–æ–≥–æ–π –ü—Ä–æ–≥–Ω–æ–∑–∏—Å—Ç\\!
–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –¥–µ—Ä–±–∏ –ø—Ä–æ—Ç–∏–≤ –õ–∞—Ü–∏–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –¥–æ –º–∞—Ç—á–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –º–µ–Ω—å—à–µ 2\\-—Ö –¥–Ω–µ–π, —Ç–æ –µ—Å—Ç—å –≤ 13\\-30 –ø–æ –ú–æ—Å–∫–≤–µ\\. 


–í–æ—Ç –Ω–∞—à [–ì–∞–π–¥](https://docs.google.com/document/d/1K7zAyX-6zEeMXGZAaAY59QjVyFsZpyNQgw1dZ4_dXBw/edit?tab=t.0)
–í–æ—Ç –Ω–∞—à–∏ –¢–∞–±–ª–∏—Ü—ã [–ü—Ä–æ–≥–Ω–æ–∑–∏—Å—Ç–∞](https://docs.google.com/spreadsheets/d/1I7APxniANMu1r1y2uRGKDrLGuR4-OeUZDqvTtrn6vos/edit?gid=1893944730#gid=1893944730)
–í–æ—Ç –Ω–∞—à [–ë—É—Å—Ç–∏](https://boosty.to/pro_asroma)\\. –ë—É–¥–µ–º —Ä–∞–¥—ã, –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏—à—å –Ω–∞—Å –∏ –ø–æ—É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –ü—Ä–∏–∑–æ–≤–æ–º —Ñ–æ–Ω–¥–µ —ç—Ç–æ–≥–æ —Å–µ–∑–æ–Ω–∞\\. \\(–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ —Å–µ–π—á–∞—Å 1300 —Ä—É–±–ª–µ–π\\)

‚ù§Ô∏èüíõ
                    """, 
                    parse_mode="MarkdownV2",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[[KeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")]],
    resize_keyboard=True
)                    
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {e}")  

    for user_id in [key for key, value in reboot_notifications.items() if value == 'yes']:
        try:
            await bot.send_message(
                chat_id=user_id,
                text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω",
                reply_markup=reboot_menu
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {e}")
async def main():
    await on_startup(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
